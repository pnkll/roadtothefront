{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0410\\u0434\\u043C\\u0438\\u043D\\u0438\\u0441\\u0442\\u0440\\u0430\\u0442\\u043E\\u0440\\\\Desktop\\\\React\\\\roadtothefront\\\\src\\\\components\\\\Dialogs\\\\Dialogs.jsx\";\nimport classes from './Dialogs.module.css';\nimport Message from './Message/Message';\nimport DialogItem from './DialogItem/DialogItem';\nimport React from 'react';\nimport { addMessageActionCreator, updateMessageActionCreator } from '../../redux/dialogsReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Dialogs(props) {\n  // let newMessagesElem = React.createRef(); - Можно и так, просто решил здесь сделать немного иначе чем на странице Profile в textarea для доб-ия поста\n  let addMessage = () => {\n    props.dispatch(addMessageActionCreator());\n  };\n\n  let updateMessage = elem => {\n    let newText = elem.target.value;\n    props.dispatch(updateMessageActionCreator(newText));\n  };\n\n  let messagesElems = props.dialogsPage.messages.map(m => {\n    if (m.userid == 'me') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.myMessage,\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          avatar: m.image,\n          text: m.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 52\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.message,\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          avatar: m.image,\n          text: m.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this);\n    }\n  });\n  let dialogsElems = props.dialogsPage.dialogs.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n    avatar: d.image,\n    id: d.id,\n    name: d.name,\n    path: '/dialogs/' + d.id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 41\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.dialogs,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.dialogsItems,\n      children: dialogsElems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.messages,\n      children: [messagesElems, /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: props.messAlt,\n        onChange: updateMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addMessage,\n        children: \"Add message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Dialogs;\nexport default Dialogs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dialogs\");","map":{"version":3,"sources":["C:/Users/Администратор/Desktop/React/roadtothefront/src/components/Dialogs/Dialogs.jsx"],"names":["classes","Message","DialogItem","React","addMessageActionCreator","updateMessageActionCreator","Dialogs","props","addMessage","dispatch","updateMessage","elem","newText","target","value","messagesElems","dialogsPage","messages","map","m","userid","myMessage","image","message","dialogsElems","dialogs","d","id","name","dialogsItems","messAlt"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,sBAApB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,uBAAT,EAAkCC,0BAAlC,QAAoE,4BAApE;;;AAIA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAEtB;AAEA,MAAIC,UAAU,GAAG,MAAM;AACrBD,IAAAA,KAAK,CAACE,QAAN,CAAgBL,uBAAuB,EAAvC;AACD,GAFD;;AAKA,MAAIM,aAAa,GAAIC,IAAD,IAAS;AAC3B,QAAIC,OAAO,GAAGD,IAAI,CAACE,MAAL,CAAYC,KAA1B;AACAP,IAAAA,KAAK,CAACE,QAAN,CAAgBJ,0BAA0B,CAACO,OAAD,CAA1C;AACD,GAHD;;AAKA,MAAIG,aAAa,GACfR,KAAK,CAACS,WAAN,CAAkBC,QAAlB,CAA2BC,GAA3B,CAA+BC,CAAC,IAAI;AAClC,QAAIA,CAAC,CAACC,MAAF,IAAY,IAAhB,EAAsB;AACpB,0BAAQ;AAAK,QAAA,SAAS,EAAEpB,OAAO,CAACqB,SAAxB;AAAA,+BAAmC,QAAC,OAAD;AAAS,UAAA,MAAM,EAAEF,CAAC,CAACG,KAAnB;AAA0B,UAAA,IAAI,EAAEH,CAAC,CAACI;AAAlC;AAAA;AAAA;AAAA;AAAA;AAAnC;AAAA;AAAA;AAAA;AAAA,cAAR;AACD,KAFD,MAGK;AACH,0BAAQ;AAAK,QAAA,SAAS,EAAEvB,OAAO,CAACuB,OAAxB;AAAA,+BAAiC,QAAC,OAAD;AAAS,UAAA,MAAM,EAAEJ,CAAC,CAACG,KAAnB;AAA0B,UAAA,IAAI,EAAEH,CAAC,CAACI;AAAlC;AAAA;AAAA;AAAA;AAAA;AAAjC;AAAA;AAAA;AAAA;AAAA,cAAR;AACD;AACF,GAPD,CADF;AAUA,MAAIC,YAAY,GACdjB,KAAK,CAACS,WAAN,CAAkBS,OAAlB,CAA0BP,GAA1B,CAA8BQ,CAAC,iBAAK,QAAC,UAAD;AAAY,IAAA,MAAM,EAAEA,CAAC,CAACJ,KAAtB;AAA6B,IAAA,EAAE,EAAEI,CAAC,CAACC,EAAnC;AAAuC,IAAA,IAAI,EAAED,CAAC,CAACE,IAA/C;AAAqD,IAAA,IAAI,EAAE,cAAcF,CAAC,CAACC;AAA3E;AAAA;AAAA;AAAA;AAAA,UAApC,CADF;AAGA,sBACE;AAAK,IAAA,SAAS,EAAE3B,OAAO,CAACyB,OAAxB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEzB,OAAO,CAAC6B,YAAxB;AAAA,gBACGL;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAExB,OAAO,CAACiB,QAAxB;AAAA,iBACGF,aADH,eAEE;AAAU,QAAA,KAAK,EAAER,KAAK,CAACuB,OAAvB;AAAgC,QAAA,QAAQ,EAAEpB;AAA1C;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAEF,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;KAxCQF,O;AA0CT,eAAeA,OAAf","sourcesContent":["import classes from './Dialogs.module.css'\r\nimport Message from './Message/Message'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport React from 'react';\r\nimport { addMessageActionCreator, updateMessageActionCreator } from '../../redux/dialogsReducer'\r\n\r\n\r\n\r\nfunction Dialogs(props) {\r\n\r\n  // let newMessagesElem = React.createRef(); - Можно и так, просто решил здесь сделать немного иначе чем на странице Profile в textarea для доб-ия поста\r\n\r\n  let addMessage = () => {\r\n    props.dispatch( addMessageActionCreator() )\r\n  }\r\n\r\n\r\n  let updateMessage = (elem) =>{\r\n    let newText = elem.target.value\r\n    props.dispatch( updateMessageActionCreator(newText) )\r\n  }\r\n\r\n  let messagesElems =\r\n    props.dialogsPage.messages.map(m => {\r\n      if (m.userid == 'me') {\r\n        return (<div className={classes.myMessage}><Message avatar={m.image} text={m.message} /></div>)\r\n      }\r\n      else {\r\n        return (<div className={classes.message}><Message avatar={m.image} text={m.message} /></div>)\r\n      }\r\n    })\r\n\r\n  let dialogsElems =\r\n    props.dialogsPage.dialogs.map(d => (<DialogItem avatar={d.image} id={d.id} name={d.name} path={'/dialogs/' + d.id} />))\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>\r\n        {dialogsElems}\r\n      </div>\r\n      <div className={classes.messages}>\r\n        {messagesElems}\r\n        <textarea value={props.messAlt} onChange={updateMessage}></textarea>\r\n        <button onClick={addMessage}>Add message</button>\r\n      </div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default Dialogs"]},"metadata":{},"sourceType":"module"}