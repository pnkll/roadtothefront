{"ast":null,"code":"var _jsxFileName = \"/home/painkill/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/projects/socialNetwork/roadtothefront/src/components/Dialogs/Dialogs.jsx\",\n    _s = $RefreshSig$();\n\nimport classes from './Dialogs.module.css';\nimport Message from './Message/Message';\nimport DialogItem from './DialogItem/DialogItem';\nimport React from 'react';\nimport { useNavigate, useEffect } from 'react-router-dom';\nimport { addMessageActionCreator, updateMessageActionCreator } from '../../redux/dialogsReducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dialogs = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    reset\n  } = useForm(); // const addMess = useSelector(state =>)\n\n  const messages = useSelector(state => state.dialogsPage.messages);\n  const dialogs = useSelector(state => state.dialogsPage.dialogs);\n  const newMessageValue = useSelector(state => state.dialogsPage.newMessageValue);\n\n  let onAddMessage = value => {\n    dispatch(addMessageActionCreator(value.message));\n    reset();\n  };\n\n  let onUpdateMessage = elem => {\n    let newText = elem.target.value;\n    dispatch(updateMessageActionCreator(newText));\n  };\n\n  let messagesElems = messages.map(m => {\n    if (m.userid == 'me') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.myMessage,\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          avatar: m.image,\n          text: m.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 64\n        }, this)\n      }, m.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.message,\n        children: /*#__PURE__*/_jsxDEV(Message, {\n          avatar: m.image,\n          text: m.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 62\n        }, this)\n      }, m.key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this);\n    }\n  });\n  var dialogsElems = dialogs.map(d => /*#__PURE__*/_jsxDEV(DialogItem, {\n    avatar: d.image,\n    id: d.id,\n    name: d.name,\n    path: '/dialogs/' + d.id\n  }, d.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 23\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.dialogs,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.dialogsItems,\n      children: dialogsElems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.messages,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this), messagesElems, /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onAddMessage),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ...register('message')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Dialogs, \"ekXH7ZhckjZPBaM2iEZb/TYIcW0=\", false, function () {\n  return [useDispatch, useForm, useSelector, useSelector, useSelector];\n});\n\n_c = Dialogs;\nexport default Dialogs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dialogs\");","map":{"version":3,"sources":["/home/painkill/Рабочий стол/projects/socialNetwork/roadtothefront/src/components/Dialogs/Dialogs.jsx"],"names":["classes","Message","DialogItem","React","useNavigate","useEffect","addMessageActionCreator","updateMessageActionCreator","useDispatch","useSelector","useForm","Dialogs","props","dispatch","register","handleSubmit","reset","messages","state","dialogsPage","dialogs","newMessageValue","onAddMessage","value","message","onUpdateMessage","elem","newText","target","messagesElems","map","m","userid","myMessage","image","key","dialogsElems","d","id","name","dialogsItems"],"mappings":"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","sourcesContent":["import classes from './Dialogs.module.css'\nimport Message from './Message/Message'\nimport DialogItem from './DialogItem/DialogItem';\nimport React from 'react';\nimport { useNavigate, useEffect} from 'react-router-dom'\nimport { addMessageActionCreator, updateMessageActionCreator } from '../../redux/dialogsReducer'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useForm } from 'react-hook-form';\n\n\n\nconst Dialogs = (props) => {\n\n  const dispatch = useDispatch()\n\n  const { register, handleSubmit, reset} = useForm()\n\n  // const addMess = useSelector(state =>)\n\n  const messages = useSelector(state => state.dialogsPage.messages)\n  const dialogs = useSelector(state => state.dialogsPage.dialogs)\n  const newMessageValue = useSelector(state => state.dialogsPage.newMessageValue)\n\n  let onAddMessage = (value) => {\n    dispatch(addMessageActionCreator(value.message))\n    reset()\n  }\n\n  let onUpdateMessage = (elem) =>{\n    let newText = elem.target.value\n    dispatch(updateMessageActionCreator(newText))\n  }\n\n  let messagesElems =\n    messages.map(m => {\n      if (m.userid == 'me') {\n        return (<div key={m.key} className={classes.myMessage}><Message avatar={m.image} text={m.message} /></div>)\n      }\n      else {\n        return (<div key={m.key} className={classes.message}><Message avatar={m.image} text={m.message} /></div>)\n      }\n    })\n\n  var dialogsElems =\n    dialogs.map(d => (<DialogItem key={d.id} avatar={d.image} id={d.id} name={d.name} path={'/dialogs/' + d.id} />))\n\n\n    return (\n      <div className={classes.dialogs}>\n        <div className={classes.dialogsItems}>\n          {dialogsElems}\n        </div>\n        <div className={classes.messages}>\n          <div>Name</div>\n          {messagesElems}\n          {/* <textarea value={newMessageValue} onChange={onUpdateMessage}></textarea>\n          <button onClick={onAddMessage}>Add message</button> */}\n          <form onSubmit={handleSubmit(onAddMessage)}>\n            <input type='text' {...register('message')}/>\n            <input type='submit'/>\n          </form>\n        </div>\n      </div>\n  \n    )\n}\n\nexport default Dialogs"]},"metadata":{},"sourceType":"module"}